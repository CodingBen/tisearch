// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: search.proto

package search

import (
	fmt "fmt"
	_ "gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SearchField struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Word                 string   `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchField) Reset()         { *m = SearchField{} }
func (m *SearchField) String() string { return proto.CompactTextString(m) }
func (*SearchField) ProtoMessage()    {}
func (*SearchField) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}
func (m *SearchField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchField.Merge(m, src)
}
func (m *SearchField) XXX_Size() int {
	return m.Size()
}
func (m *SearchField) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchField.DiscardUnknown(m)
}

var xxx_messageInfo_SearchField proto.InternalMessageInfo

func (m *SearchField) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *SearchField) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type SearchQuery struct {
	IndexName            string       `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	Mode                 int32        `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Limit                uint64       `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	SearchFields         *SearchField `protobuf:"bytes,4,opt,name=searchFields,proto3" json:"searchFields,omitempty"`
	StoreFields          string       `protobuf:"bytes,5,opt,name=store_fields,json=storeFields,proto3" json:"store_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SearchQuery) Reset()         { *m = SearchQuery{} }
func (m *SearchQuery) String() string { return proto.CompactTextString(m) }
func (*SearchQuery) ProtoMessage()    {}
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}
func (m *SearchQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchQuery.Merge(m, src)
}
func (m *SearchQuery) XXX_Size() int {
	return m.Size()
}
func (m *SearchQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SearchQuery proto.InternalMessageInfo

func (m *SearchQuery) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *SearchQuery) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *SearchQuery) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchQuery) GetSearchFields() *SearchField {
	if m != nil {
		return m.SearchFields
	}
	return nil
}

func (m *SearchQuery) GetStoreFields() string {
	if m != nil {
		return m.StoreFields
	}
	return ""
}

type Parser struct {
	ParserType           int32    `protobuf:"varint,1,opt,name=ParserType,proto3" json:"ParserType,omitempty"`
	MaxTokenSize         uint32   `protobuf:"varint,2,opt,name=maxTokenSize,proto3" json:"maxTokenSize,omitempty"`
	MinTokenSize         uint32   `protobuf:"varint,3,opt,name=minTokenSize,proto3" json:"minTokenSize,omitempty"`
	StopWords            []string `protobuf:"bytes,4,rep,name=stopWords,proto3" json:"stopWords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Parser) Reset()         { *m = Parser{} }
func (m *Parser) String() string { return proto.CompactTextString(m) }
func (*Parser) ProtoMessage()    {}
func (*Parser) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{2}
}
func (m *Parser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Parser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Parser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Parser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parser.Merge(m, src)
}
func (m *Parser) XXX_Size() int {
	return m.Size()
}
func (m *Parser) XXX_DiscardUnknown() {
	xxx_messageInfo_Parser.DiscardUnknown(m)
}

var xxx_messageInfo_Parser proto.InternalMessageInfo

func (m *Parser) GetParserType() int32 {
	if m != nil {
		return m.ParserType
	}
	return 0
}

func (m *Parser) GetMaxTokenSize() uint32 {
	if m != nil {
		return m.MaxTokenSize
	}
	return 0
}

func (m *Parser) GetMinTokenSize() uint32 {
	if m != nil {
		return m.MinTokenSize
	}
	return 0
}

func (m *Parser) GetStopWords() []string {
	if m != nil {
		return m.StopWords
	}
	return nil
}

type FullTextIndex struct {
	IndexName            string   `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	Parser               *Parser  `protobuf:"bytes,2,opt,name=parser,proto3" json:"parser,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FullTextIndex) Reset()         { *m = FullTextIndex{} }
func (m *FullTextIndex) String() string { return proto.CompactTextString(m) }
func (*FullTextIndex) ProtoMessage()    {}
func (*FullTextIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{3}
}
func (m *FullTextIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullTextIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullTextIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullTextIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullTextIndex.Merge(m, src)
}
func (m *FullTextIndex) XXX_Size() int {
	return m.Size()
}
func (m *FullTextIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_FullTextIndex.DiscardUnknown(m)
}

var xxx_messageInfo_FullTextIndex proto.InternalMessageInfo

func (m *FullTextIndex) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *FullTextIndex) GetParser() *Parser {
	if m != nil {
		return m.Parser
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchField)(nil), "search.SearchField")
	proto.RegisterType((*SearchQuery)(nil), "search.SearchQuery")
	proto.RegisterType((*Parser)(nil), "search.Parser")
	proto.RegisterType((*FullTextIndex)(nil), "search.FullTextIndex")
}

func init() { proto.RegisterFile("search.proto", fileDescriptor_453745cff914010e) }

var fileDescriptor_453745cff914010e = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0x7f, 0xff, 0x6d, 0x22, 0xf5, 0xa6, 0x45, 0xc8, 0x74, 0x88, 0x10, 0x8a, 0x4a, 0x06,
	0xd4, 0xa9, 0x48, 0x65, 0xe8, 0xce, 0x50, 0x89, 0x05, 0x81, 0x1b, 0xc4, 0x88, 0x02, 0x71, 0x8b,
	0x45, 0x12, 0x47, 0x4e, 0x2a, 0x52, 0x1e, 0x82, 0x99, 0xd7, 0xe0, 0x2d, 0x18, 0x79, 0x04, 0x14,
	0x5e, 0x04, 0xf9, 0x3a, 0xa1, 0xe9, 0xc4, 0x76, 0x7c, 0xee, 0xb9, 0xce, 0xe7, 0x13, 0xe8, 0xe7,
	0x3c, 0x54, 0x0f, 0x8f, 0x93, 0x4c, 0xc9, 0x42, 0x52, 0xdb, 0x9c, 0x0e, 0x87, 0x2b, 0xb9, 0x92,
	0x68, 0x9d, 0x6a, 0x65, 0xa6, 0xfe, 0x0c, 0x9c, 0x05, 0xce, 0xe7, 0x82, 0xc7, 0x11, 0x1d, 0x82,
	0xb5, 0xd4, 0xc2, 0x25, 0x23, 0x32, 0xee, 0x31, 0x73, 0xa0, 0x14, 0xba, 0xcf, 0x52, 0x45, 0xee,
	0x7f, 0x34, 0x51, 0xfb, 0xef, 0xa4, 0xd9, 0xbc, 0x5e, 0x73, 0xb5, 0xa1, 0x47, 0xd0, 0x13, 0x69,
	0xc4, 0xcb, 0xcb, 0x30, 0xe1, 0xf5, 0xf6, 0xd6, 0xd0, 0x37, 0x24, 0x32, 0xe2, 0x78, 0x83, 0xc5,
	0x50, 0xeb, 0x6f, 0xc5, 0x22, 0x11, 0x85, 0xdb, 0x19, 0x91, 0x71, 0x97, 0x99, 0x03, 0x9d, 0x35,
	0xf8, 0x08, 0x94, 0xbb, 0xdd, 0x11, 0x19, 0x3b, 0xd3, 0x83, 0x49, 0xfd, 0xa6, 0x16, 0x2c, 0xdb,
	0x09, 0xd2, 0x63, 0xe8, 0xe7, 0x85, 0x54, 0xfc, 0x6e, 0x69, 0x16, 0x2d, 0x64, 0x70, 0xd0, 0x33,
	0x11, 0xff, 0x95, 0x80, 0x7d, 0x15, 0xaa, 0x9c, 0x2b, 0xea, 0x01, 0x18, 0x15, 0x6c, 0x32, 0xc3,
	0x6b, 0xb1, 0x96, 0x43, 0x7d, 0xe8, 0x27, 0x61, 0x19, 0xc8, 0x27, 0x9e, 0x2e, 0xc4, 0x8b, 0x01,
	0x1f, 0xb0, 0x1d, 0x0f, 0x33, 0x22, 0xdd, 0x66, 0x3a, 0x75, 0xa6, 0xe5, 0xe9, 0x5a, 0xf2, 0x42,
	0x66, 0xb7, 0x52, 0xe1, 0x5b, 0x3a, 0xba, 0x96, 0x5f, 0xc3, 0xbf, 0x81, 0xc1, 0x7c, 0x1d, 0xc7,
	0x01, 0x2f, 0x8b, 0x0b, 0xdd, 0xd5, 0x1f, 0x2d, 0x9e, 0x80, 0x9d, 0x21, 0x22, 0xe2, 0x38, 0xd3,
	0xbd, 0xa6, 0x15, 0x03, 0xce, 0xea, 0xe9, 0xf9, 0xfe, 0x47, 0xe5, 0x91, 0xcf, 0xca, 0x23, 0x5f,
	0x95, 0x47, 0xde, 0xbe, 0xbd, 0x7f, 0xf7, 0x36, 0xfe, 0xed, 0xb3, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x74, 0xb2, 0x42, 0xaa, 0x1b, 0x02, 0x00, 0x00,
}

func (m *SearchField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Word) > 0 {
		i -= len(m.Word)
		copy(dAtA[i:], m.Word)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Word)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StoreFields) > 0 {
		i -= len(m.StoreFields)
		copy(dAtA[i:], m.StoreFields)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.StoreFields)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SearchFields != nil {
		{
			size, err := m.SearchFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Limit != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Mode != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IndexName) > 0 {
		i -= len(m.IndexName)
		copy(dAtA[i:], m.IndexName)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.IndexName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Parser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Parser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StopWords) > 0 {
		for iNdEx := len(m.StopWords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StopWords[iNdEx])
			copy(dAtA[i:], m.StopWords[iNdEx])
			i = encodeVarintSearch(dAtA, i, uint64(len(m.StopWords[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MinTokenSize != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.MinTokenSize))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxTokenSize != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.MaxTokenSize))
		i--
		dAtA[i] = 0x10
	}
	if m.ParserType != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.ParserType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FullTextIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullTextIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullTextIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Parser != nil {
		{
			size, err := m.Parser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IndexName) > 0 {
		i -= len(m.IndexName)
		copy(dAtA[i:], m.IndexName)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.IndexName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSearch(dAtA []byte, offset int, v uint64) int {
	offset -= sovSearch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SearchField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Word)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IndexName)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovSearch(uint64(m.Mode))
	}
	if m.Limit != 0 {
		n += 1 + sovSearch(uint64(m.Limit))
	}
	if m.SearchFields != nil {
		l = m.SearchFields.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.StoreFields)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Parser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParserType != 0 {
		n += 1 + sovSearch(uint64(m.ParserType))
	}
	if m.MaxTokenSize != 0 {
		n += 1 + sovSearch(uint64(m.MaxTokenSize))
	}
	if m.MinTokenSize != 0 {
		n += 1 + sovSearch(uint64(m.MinTokenSize))
	}
	if len(m.StopWords) > 0 {
		for _, s := range m.StopWords {
			l = len(s)
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FullTextIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IndexName)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Parser != nil {
		l = m.Parser.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSearch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSearch(x uint64) (n int) {
	return sovSearch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Word = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchFields == nil {
				m.SearchFields = &SearchField{}
			}
			if err := m.SearchFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreFields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Parser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParserType", wireType)
			}
			m.ParserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParserType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTokenSize", wireType)
			}
			m.MaxTokenSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTokenSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTokenSize", wireType)
			}
			m.MinTokenSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTokenSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StopWords = append(m.StopWords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullTextIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullTextIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullTextIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parser == nil {
				m.Parser = &Parser{}
			}
			if err := m.Parser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSearch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSearch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSearch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSearch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSearch = fmt.Errorf("proto: unexpected end of group")
)
